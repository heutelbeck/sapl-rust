/*
 * This set of demo policies illustrates how JWT can be used in tandem with SAPL.
 * 
 * The JWT extensions for SAPL enable access to data contained in a JWT as attributes.
 * In addition, the JWT libraries allow for token validation and time-based policies 
 * dynamically taking into account the time for which a JWT is valid.
 */

set "JWT Demo Policies"
first-applicable

/*
 * The spring security libraries for OAuth2 JWT integration map each element of 
 * the "scope" array in an JWT token to a Spring Principal authority, prepending 
 * "SCOPE_" to each String representing the scope.
 * These can be references as any "ROLE_" or other authority provided by Spring
 * security.  
 */
policy "Scopes as Authority in Principal"
permit resource == "books"
where 
	"SCOPE_books.read" in subject..authority;

/*
 * In the demo, Spring does actually serialize the Principal in a way, that the token
 * is contained and can be directly accessed. This may not be the case in an arbitrary 
 * PEP environment.
 * 
 * However, note that by accessing the data directly this way does not validate the 
 * JWT token in any way. 
 */
policy "Reading scopes as a claim from JWT JSON in the 'token' attribute of the subject"
permit resource == "faculty"
where
	"faculty.read" in subject.token.claims.scope;

/*
 * If the raw JWT token is contained as an attribute in the subject, the JWT function 
 * library can be used to parse the token and to map it to a SAPL Value.
 * 
 * Note:
 *   1. The resulting scheme is not necessarily the same as the token stemming from 
 *      serialization of the Principal object as used in the example policy above.
 *   2. This also does not validate the token in any way.
 */ 
policy "Reading scopes a raw JWT token available as a subject attribute"
permit resource == "bestiary"
where
  "bestiary.read" in jwt.parseJwt(subject.principal.tokenValue).payload.scope;

/*
 * This policy will evaluate to permit for the time the token is valid
 */
policy "Policy to test timeout of token"
permit resource == "mysteries"
where
	subject.principal.tokenValue.<jwt.valid>;

